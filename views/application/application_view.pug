doctype html
html(lang="en")
head
  title 2020 Workshop Applications
  include ../components/head.pug

include ../components/staticnav_admin.pug

script.
    document.getElementById("applicationManagement").style.backgroundColor = "steelBlue"
    document.getElementById("applicationManagement").style.color = "white"

style.
    hr.thick {
        background-color: black;
        border: none; 
        height: 3px; 
    }

    button {
        display: inline;
        margin: 2em;
    }

    label.inline {
        display: inline;
    }

body(id="body")

br
br

.container(style="text-align:center;")
    .row
        h1 2020 Workshop Applications
        hr

    - var app_index = 0
    each app in locals.apps
        .row
            h4 Application !{app_index + 1}
        .row
            .six.columns
                label Name
                p #{app.name}

            .six.columns
                label E-Mail
                p #{app.email}
        .row
            .three.columns &nbsp;
            .six.columns
                label Address
                p #{app.address}
        .row
            .six.columns
                label City
                p #{app.city}

            .two.columns
                label State
                p #{app.state}
            .four.columns
                label Zip Code
                p #{app.zip}
        .row
            label Previous Experience
            != app.experience.replace(/\r\n/gi, "<br>")

        br

        .row
            label Questions and Comments
            != app.questions.replace(/\r\n/gi, "<br>")

        br
        br

        - let human_date = new Date( parseInt(app.timestamp) )
        .row
                label.inline Submitted: #{human_date}

        .row
            label.inline Decision: 
            button.decision(id=`decision_${app_index}`, onclick=`toggleDecision(${app_index})`) #{app.decision}

            label.inline Has Paid: 
            button.paid(id=`paid_${app_index}`, onclick=`togglePaid(${app_index})` ) #{app.paid}
            
        .row
            label Notes
            textarea(id=`notes_${app_index}`, oninput=`updateNotes(${app_index})`) #{app.notes}

        hr.thick
        - app_index += 1

    if locals.apps.length < 1
        .h3 No Applications on Server

script.

    const ws = new WebSocket('wss://mokuhangaprojectspace.com:8080');

    ws.addEventListener('open', function (event) {
        message = {
            label: "log",
            data: "'Hello Server!'"
        }
        ws.send(JSON.stringify(message))
    })

    ws.addEventListener('message', function (event) {
        const data = JSON.parse(event.data)
        switch (data.label) {
            case "application_update":
                updateData(data.idx, data.data)
                break
            case "update_failed":
                console.log("update_failed")
                break
        }
    })

    let apps = !{JSON.stringify(locals.apps)}
    let paid_enums = ["nothing", "deposit", "in full"]
    let decision_enums = ["pending", "waitlisted", "accepted"]

    function nextItem(lst, item) {
        const current_idx = lst.lastIndexOf(item)
        let next_idx = current_idx + 1
        if (next_idx == lst.length) {
            next_idx = 0
        }
        return lst[next_idx]
    }

    function updateData(idx, data) {
        apps[idx] = data
        document.getElementById(`notes_${idx}`).value = data.notes
        document.getElementById(`paid_${idx}`).innerHTML = data.paid
        document.getElementById(`decision_${idx}`).innerHTML = data.decision
    }

    function updateNotes(idx) {
        apps[idx].notes = document.getElementById(`notes_${idx}`).value
        update(idx)
    }

    function togglePaid(idx) {
        const current_value = apps[idx].paid 
        const next_value = nextItem(paid_enums, current_value)
        apps[idx].paid = next_value
        document.getElementById(`paid_${idx}`).innerHTML = next_value
        update(idx)
    }

    function toggleDecision(idx) {
        const current_value = apps[idx].decision 
        const next_value = nextItem(decision_enums, current_value)
        apps[idx].decision = next_value
        document.getElementById(`decision_${idx}`).innerHTML = next_value
        update(idx)
    }

    function update(idx) {
        let message = {
            label: "update_application",
            idx: idx,
            data: apps[idx]
        }
        ws.send( JSON.stringify(message) )
    }
    
